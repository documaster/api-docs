<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documaster Noark5 API</title><link>https://documaster.github.io/api-docs/</link><description>Recent content on Documaster Noark5 API</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Nov 2018 08:41:44 +0100</lastBuildDate><atom:link href="https://documaster.github.io/api-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://documaster.github.io/api-docs/operations/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/overview/</guid><description>Overview Documaster Noark5 API is an HTTP/JSON based API, secured with OAuth2/OIC. As such all requests and responses, apart from those for uploading and downloading files are in JSON format (having Content-Type: application/json).
Documaster Noark 5 API exposes operations for managing all the archive core entities, together with operations for managing business specific metadata (BSM), code lists, etc. Core entities are managed through the Core Operations, while any other entities are managed using Other Operations.</description></item><item><title>Overview</title><link>https://documaster.github.io/api-docs/model/overview/</link><pubDate>Thu, 29 Nov 2018 08:41:44 +0100</pubDate><guid>https://documaster.github.io/api-docs/model/overview/</guid><description/></item><item><title>Case Party</title><link>https://documaster.github.io/api-docs/model/entities/abstractfolder/casefile/caseparty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/abstractfolder/casefile/caseparty/</guid><description>Sakspart</description></item><item><title>Common</title><link>https://documaster.github.io/api-docs/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/common/</guid><description>AbstraktRegistrering / Abstract Record Fields Field no. Type Field Not null Has default Code list Save View Query Sort Comment string id x x sm x x x string version x x sm x x M001 string .</description></item><item><title>Fonds Creator</title><link>https://documaster.github.io/api-docs/model/entities/fonds/fondscreator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/fonds/fondscreator/</guid><description>Arkivskaper</description></item><item><title>Class</title><link>https://documaster.github.io/api-docs/model/entities/classification/class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/classification/class/</guid><description>Klasse</description></item><item><title>Series</title><link>https://documaster.github.io/api-docs/model/entities/series/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/series/</guid><description>Arkivdel</description></item><item><title>Upload</title><link>https://documaster.github.io/api-docs/operations/core/upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/core/upload/</guid><description/></item><item><title>Case File and Case Party</title><link>https://documaster.github.io/api-docs/usage/perentity/casefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/casefile/</guid><description>Creating Case File Case Files (Saksmappe) are created using transaction API, where in a single transaction the newly created case file must be linked to a single Series (Arkivdel), through reference Saksmappe::refArkivdel, and to one primary Class (Klasse), through reference Saksmappe::refPrimaerKlasse, part of the Classification System (Klassifikasjonssystem) linked to the series. Case File (Saksmappe) can be linked to more than one Class (Klasse) as secondary class, using the reference SaksMappe::refSekundaerKlasse. Additionally the example below is adding an External ID (EksternId), which is an identifier of the case file in an external system.</description></item><item><title>Download</title><link>https://documaster.github.io/api-docs/operations/core/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/core/download/</guid><description/></item><item><title>Registry Entry</title><link>https://documaster.github.io/api-docs/usage/perentity/registryentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/registryentry/</guid><description>Creating Registry Entry Registry entries are created using transaction API, where in a single transaction the newly created registry entry should be linked to a case file (Saksmappe) or a basic folder (Mappe). Bear in mind that the registry entry can be under only one folder. Newly created registry entry requires at least one correspondence party (Korrespondansepart) to be created and associated with the registry entry. The link is done using transaction::link action following the guidelines to use newly created entry reference field to parent entry (Korrespondansepart::refRegistrering), rather than parent entry reference field (Journalpost::refKorrespondansepart).</description></item><item><title>Meeting Participant</title><link>https://documaster.github.io/api-docs/model/entities/abstractfolder/meetingfolder/meetingparticipant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/abstractfolder/meetingfolder/meetingparticipant/</guid><description>Moetedeltaker</description></item><item><title>Usage Guidelines</title><link>https://documaster.github.io/api-docs/operations/usage-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/usage-guidelines/</guid><description>All Operations Access Token Management Error Handling Transaction Key Usage Points Best Practices The page summarizes best practices for using the operations of Documaster Noark5 API.
All Operations Access Token Management The topic of managing the access tokens is dicussed in Authorization and Authentication section of the documentation.
Error Handling Calls made to the API can result in a number of HTTP status codes returned, which are detailed in Operations/Overview section.</description></item></channel></rss>