<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documaster Noark5 API</title><link>https://documaster.github.io/api-docs/</link><description>Recent content on Documaster Noark5 API</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Nov 2018 08:41:44 +0100</lastBuildDate><atom:link href="https://documaster.github.io/api-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://documaster.github.io/api-docs/operations/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/overview/</guid><description>Overview Documaster Noark5 API is an HTTP/JSON based API, secured with OAuth2/OIC. As such all requests and responses, apart from those for uploading and downloading files are in JSON format (having Content-Type: application/json).
Documaster Noark 5 API exposes operations for managing all the archive core entities, together with operations for managing business specific metadata (BSM), code lists, etc. Core entities are managed through the Core Operations, while any other entities are managed using Other Operations.</description></item><item><title>Overview</title><link>https://documaster.github.io/api-docs/model/overview/</link><pubDate>Thu, 29 Nov 2018 08:41:44 +0100</pubDate><guid>https://documaster.github.io/api-docs/model/overview/</guid><description>Entity Felds Documaster Noark5 API entities have two types of fields :
Data Fields - fields which contain properties of the entity. Data fields support the following types : string, date, timestamp, number and boolean. Reference Fields - fields which represent links to other entities in the model, like foreign keys in a relational database model (prefixed with ref). A reference field can represent a one to one or one to many relations.</description></item><item><title>Classification System and Class</title><link>https://documaster.github.io/api-docs/usage/perentity/classifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/classifications/</guid><description>Creating Class with BSM values Classes (Klasse) are created with the POST /transaction operation. Important unique data field for the Classes (Klasse) is klasseIdent. The sample below also adds sample BSM (business specific metadata) values to the class.
The BSM values associated with the Class are visible in the user interface when the class linked to folder (Saksmappe, Mappe, etc.)
transaction::save - new Class (Klasse) with BSM field qsid (Quality System ID) defined in BSM group qs1 (Quality System 1) transaction::link - link the new Class (Klasse) to the existing Classification System (Klassifikasjonssystem).</description></item><item><title>Common</title><link>https://documaster.github.io/api-docs/common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/common/</guid><description>AbstraktRegistrering / Abstract Record Fields Field no. Type Field Not null Has default Code list Save View Query Sort Comment string id x x sm x x x string version x x sm x x M001 string .</description></item><item><title>Common Data Fields</title><link>https://documaster.github.io/api-docs/common-data-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/common-data-fields/</guid><description>Common Data Fields Following the Noark5 specification requirements and the internal implementation details the following set of data fields are present for all entities :
Field Name Type Noark Metadata No. Required on Create Value Always Available Modifiable Description id string no yes no unique entity identifier in the specific Documaster installation, used for referencing the entity in the API. The id for created entities is a numeric value.</description></item><item><title>Fonds and Fonds Creator</title><link>https://documaster.github.io/api-docs/usage/perentity/fonds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/fonds/</guid><description>Creating Fonds Fonds (Arkiv) is created with the POST /transaction operation. In the same transaction at least one Fonds Creator (Arkivskaper) entity should be created and associated to the Fonds (Arkiv).
transaction::save - new Fonds (Arkiv) transaction::save - new Fonds Creator (Arkivskaper) transaction::link - link new Fonds Creator (Arkivskaper) to new Fonds (Arkiv) with id 688 As a result of the transaction new Fonds (Arkiv) and Fonds Creator (Arkivskaper) are created with ids respectively 11888 and 11889.</description></item><item><title>Code Lists Operations</title><link>https://documaster.github.io/api-docs/operations/other/codelists/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://documaster.github.io/api-docs/operations/other/codelists/</guid><description>Overview Code List operations are used to manage the different lists of values used for fields of the core entities. Definition of the code lists can be found in the Data Model section of the documentation.
Important to notice is that the API works with code lists associated to core entity types and specific fields.Entities fields names are unique in Documaster Archive and are the unique identifiers of the code lists.</description></item><item><title>Full-Text Search Utilization</title><link>https://documaster.github.io/api-docs/usage/perusecase/full-text-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perusecase/full-text-search/</guid><description>Usecase Details API Consumer has the need to support full-text search over the archive and to visualize a list of folders (one of Case File (Saksmappe), Basic Folder (Mappe) or Meeting Folder (MoetteMappe)) based on the search results. The string used to execute the query can be contained in any of the fields supported by the Full-Text Search opeartion. For this purpose the most complete index collection is used - Tekst.</description></item><item><title>Series</title><link>https://documaster.github.io/api-docs/model/entities/series/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/entities/series/</guid><description>Overview Series (Arkivdel) is an entity representing a section of the archive under the Fonds (Arkiv).
Entity name in the API : Arkivdel. Being a core Noark5 model entity, Series (Arkivdel) is created/modified using the Transaction :: POST /transaction operation. Series (Arkivdel) can contain multiple Folders (or Records) Series (Arkivdel) can have a single primary classification system (Klassifikasjonssystem) and many secondary classification systems. Data Fields Common Data Fields Following the Noark5 specification requirements and the internal implementation details the following set of data fields are present for all entities :</description></item><item><title>Business Specific Metadata Operations</title><link>https://documaster.github.io/api-docs/operations/other/bsm/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://documaster.github.io/api-docs/operations/other/bsm/</guid><description>Overview Business Specific Metadata operations allow full control over the additional metadata that can be added to extend the core Noark5 entities. Business specific metadata can be added to the following set of core entities :
Class (Klasse)
Folders
Basic Folder (Mappe) Meeting Folder (Moetomappe) Case File (Saksmappe) Case Party (Sakspart) Records
Basic Record (Registrering) Meeting Record (Moetoregistrering) Registry Entry (Journalpost) Correspondence Party (Korrespondansepart) Document (Dokument)</description></item><item><title>Upload</title><link>https://documaster.github.io/api-docs/operations/core/upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/core/upload/</guid><description>Description POST /noark5/v1/upload The POST /noark5/v1/upload or as referred to in the documentation upload operation is the way to upload electronic documents to Documaster Archive. The operation returns an identifier of the uploaded file, which can be used at a later stage to be linked to the Document Version(Dokumentversjon) core object.
In case the uploaded electronic documents are not linked to any Document Version (Dokumentversjon) object for more than 3600 seconds/1 hour, the documents are deleted and cannot be referenced.</description></item><item><title>Case File and Case Party</title><link>https://documaster.github.io/api-docs/usage/perentity/casefile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/casefile/</guid><description>Creating Case File Case Files (Saksmappe) are created using transaction API, where in a single transaction the newly created case file must be linked to a single Series (Arkivdel), through reference Saksmappe::refArkivdel, and to one primary Class (Klasse), through reference Saksmappe::refPrimaerKlasse, part of the Classification System (Klassifikasjonssystem) linked to the series. Case File (Saksmappe) can be linked to more than one Class (Klasse) as secondary class, using the reference SaksMappe::refSekundaerKlasse. Additionally the example below is adding an External ID (EksternId), which is an identifier of the case file in an external system.</description></item><item><title>Download</title><link>https://documaster.github.io/api-docs/operations/core/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/core/download/</guid><description>Description GET /noark5/v1/download?id={documentID} The GET /noark5/v1/download or as referred to in the documentation download operation is the way to retrieve already uploaded electronic documents from Documaster Archive.
Request The request for the operation is the electronic document payload. Uploading the document requires it&amp;rsquo;s name to be provided in the Content-Disposition header as shown below.
HTTP Request Field Location Mandatory Type Description Authorization Header yes string access token aquired as part of the authentication call, prefixed with Bearer id Query yes bytes identifier of the electronic document in Documaster Archive, returned as a resulf ot the upload operation HTTP Java C#  Request</description></item><item><title>Registry Entry</title><link>https://documaster.github.io/api-docs/usage/perentity/registryentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/usage/perentity/registryentry/</guid><description>Creating Registry Entry Registry entries are created using transaction API, where in a single transaction the newly created registry entry should be linked to a case file (Saksmappe) or a basic folder (Mappe). Bear in mind that the registry entry can be under only one folder. Newly created registry entry requires at least one correspondence party (Korrespondansepart) to be created and associated with the registry entry. The link is done using transaction::link action following the guidelines to use newly created entry reference field to parent entry (Korrespondansepart::refRegistrering), rather than parent entry reference field (Journalpost::refKorrespondansepart).</description></item><item><title>Bulk Operations</title><link>https://documaster.github.io/api-docs/operations/other/bulk/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://documaster.github.io/api-docs/operations/other/bulk/</guid><description>Overview Bulk operations allow control over large set of entities for opening and closing them. The operations listed below are technically changing the status of the modified objects, thus limiting the possibility of any future changes.
POST /noark5/v1/bulk/open The operation is used to open a parent entity and all of its child entities recursively. The operation returns immediately and execution of the requested change is done in an asynchronous way.</description></item><item><title>Full-Text Search</title><link>https://documaster.github.io/api-docs/operations/other/full-text-search/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://documaster.github.io/api-docs/operations/other/full-text-search/</guid><description>Overview Full-Text Search operation allows querying the archive using an arbitraty string over a predefined collection of entity types grouped in index collections or as referred to in the operation paratemers doctype. Entities created in Documaster are indexed on a regular basis and available in those index collections for full-text queries to be executed.
Index Collection Name Indexed Entities Tekst Tekst (document text)Dokumentversjon (latest only)DokumentAbstraktRegistrering (and its Noekkelord, Korrespondansepart, virksomhetsspesifikkeMetadata, secondary Klasse, and secondary Klassifikasjonssystem)AbstraktMappe (and its Noekkelord, virksomhetsspesifikkeMetadata, primary Klasse, secondary Klasse, secondary Klassifikasjonssystem, Sakspart, Arkivdel, and Arkiv) Korrespondansepart Korrespondansepart Registrering AbstraktRegistrering (and its Noekkelord, Korrespondansepart, virksomhetsspesifikkeMetadata, secondary Klasse, and secondary Klassifikasjonssystem)AbstraktMappe (and its Arkivdel, and Arkiv) Mappe AbstraktMappe (and its Noekkelord, virksomhetsspesifikkeMetadata, and Sakspart) Arkivdel Arkivdel Using the index collection Tekst would be the default for most of the use cases related to full-text search.</description></item><item><title>Access Control Management Operations</title><link>https://documaster.github.io/api-docs/operations/other/access-control/</link><pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate><guid>https://documaster.github.io/api-docs/operations/other/access-control/</guid><description>Overview Access Control Management operations provide the capability to control all security aspects of the archive, including access groups and permissions on specific entities.</description></item><item><title>Common Entities</title><link>https://documaster.github.io/api-docs/model/secondary-entities/common-entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/secondary-entities/common-entities/</guid><description/></item><item><title>National Identifiers</title><link>https://documaster.github.io/api-docs/model/secondary-entities/national-identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/model/secondary-entities/national-identifiers/</guid><description/></item><item><title>Usage Guidelines</title><link>https://documaster.github.io/api-docs/operations/usage-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://documaster.github.io/api-docs/operations/usage-guidelines/</guid><description>All Operations Access Token Management Error Handling Transaction Key Usage Points Best Practices The page summarizes best practices for using the operations of Documaster Noark5 API.
All Operations Access Token Management The topic of managing the access tokens is dicussed in Authorization and Authentication section of the documentation.
Error Handling Calls made to the API can result in a number of HTTP status codes returned, which are detailed in Operations/Overview section.</description></item></channel></rss>